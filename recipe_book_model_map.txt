dishes (A `dish` is something the client wants to cook like _pizza_ or _tacos_.)
- id: PK
- name: string, required

recipes (A `dish` can have different recipes for tacos, like _tex-mex_ or _granny's_. A `recipe` belongs only to one `dish`.)
- id: PK
- name: string, required
- dish_id: int, FK(dishes.id)

ingredients (have a way to manage ingredients.)
- id: PK
- name: string, unique, required

recipe_ingredients (a `recipe` could have more than one ingredient and the same ingredient can be used in multiple recipes. Examples are "cup of corn flour" or "gram of butter". when saving the ingredients for a `recipe` capture the quantity required for that ingredient as a floating number.)
- id: PK
- recipe: int, FK(recipes.id)
- ingredient: int, FK(ingredients.id)
- amount: real, required
- unit: string, required

instructions (have a way to save instructions for cooking a recipe. Instructions will be a series of `steps` involved in cooking a `recipe`. for some recipes, the order in which the steps are performed matters, please provide a way to specify that order.)
- id: PK
- recipe: int, FK(recipes.id)
- step: string
- stepNum: int

shopping_list (view. have a way to pick a `dish` and a `recipe` and get a _shopping list_ with all the ingredients, and quantity of each, needed to cook the `dish`.)
- dish
- recipe
- ingredients, quantity
